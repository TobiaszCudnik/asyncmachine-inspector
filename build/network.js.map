{"version":3,"sources":["network.ts"],"names":["Node","Node.constructor","Node.state","Node.is_set","Node.full_name","Node.relations","Network","Network.constructor","Network.states","Network.addMachine","Network.bindToMachine","Network.dispose","Network.statesToNodes","Network.getRelationsFromNode","Network.getNodeByName","Network.linkPipedStates"],"mappings":"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","file":"network.js","sourcesContent":["import * as am from 'asyncmachine'\nimport * as Graph from 'graphs'\nimport * as uuid from 'node-uuid'\nimport * as assert from 'assert'\n// TODO fix the declaration\n// import * as EventEmitter from 'eventemitter3'\nimport * as EventEmitter from 'eventemitter3'\n\ntype MachinesMap = Map<am.AsyncMachine, string>;\ntype NodeGraph = Graph<Node>\n\nexport interface ExternalNode {\n    node: Node;\n    machine: am.AsyncMachine;\n}\n\nexport class Node {\n\n    /**\n     * Get the original state definition.\n     */\n    get state(): am.IState {\n        return this.machine.get(this.name)\n    }\n\n    /**\n     * Is the state currently set?\n     */\n    get is_set(): boolean {\n        return this.machine.is(this.name)\n    }\n    \n    get full_name(): string {\n        return `${this.machine_id}:${this.name}`\n    }\n\n    constructor(\n        public name: string,\n        public machine: am.AsyncMachine,\n        public machine_id: string) {\n    }\n\n    relations(node: Node | string): string[] {\n        var name = node instanceof Node\n            ? node.name : node.toString()\n        return this.machine.getRelations(this.name, name)\n    }\n}\n\n\n/**\n * TODO inherit from Graph\n */\nexport default class Network extends EventEmitter {\n    id: string;\n    graph: NodeGraph;\n    machines: MachinesMap;\n    machine_ids: { [index: string]: am.AsyncMachine };\n\n    get states() {\n        return [...this.graph.set]\n    }\n\n    constructor() {\n        super()\n        this.graph = <NodeGraph>new Graph()\n        this.machines = <MachinesMap>new Map()\n        this.machine_ids = {}\n        this.id = uuid.v4()\n    }\n\n    addMachine(machine: am.AsyncMachine) {\n        // TODO check for duplicates first\n        // TODO deterministic IDs!!!\n        var id = machine.debug_prefix || uuid.v4()\n        this.machines.set(machine, id)\n        this.machine_ids[id] = machine\n        this.statesToNodes(machine.states_all, id)\n        this.bindToMachine(machine)\n\n        // TODO this is required, but should be checked\n        for (let [machine, id] of this.machines) {\n            this.linkPipedStates(machine)\n        }\n    }\n\n    private bindToMachine(machine: am.AsyncMachine) {\n        // bind to the state change\n        // TODO bind to:\n        // - piping (new and removed ones)\n        // - transition start\n        // - transition end / cancel\n        // TODO unbind on dispose\n        // TODO group the same changes emitted by couple of machines\n        machine.on('change', () => this.emit('change'))\n    }\n\n    dispose() {\n        // TODO unbind listeners\n    }\n\n    private statesToNodes(names: string[], machine_id: string) {\n        // scan states\n        let new_nodes = []\n        let machine = this.machine_ids[machine_id]\n        for (let name of names) {\n            let node = new Node(name, machine, machine_id)\n            this.graph.add(node)\n            new_nodes.push(node)\n        }\n\n        // get edges from relations\n        // all the nodes have to be parsed prior to this\n        for (let node of new_nodes)\n            this.getRelationsFromNode(node, machine_id)\n    }\n\n    private getRelationsFromNode(node: Node, machine_id: string) {\n        // TODO limit to 'requires' and 'drops' ?\n        let machine = this.machine_ids[machine_id]\n        let state = node.state\n        assert(state)\n        for (let relation in state) {\n            if (relation == 'auto')\n                continue\n\n            let targets = state[relation]\n\n            for (let target_name of targets) {\n                let target = this.getNodeByName(target_name, machine_id)\n                assert(target)\n                this.graph.link(node, target)\n            }\n        }\n    }\n\n    getNodeByName(name: string, machine_id: string) {\n        // for (let node of this.graph.set) {\n        var ret\n        this.graph.set.forEach( node => {\n            if (node.name === name && node.machine_id === machine_id)\n                ret = node\n        })\n        return ret\n    }\n\n    protected linkPipedStates(machine: am.AsyncMachine) {\n        for (let state in machine.piped) {\n            var data = machine.piped[state]\n\n            let source_state = this.getNodeByName(state, this.machines.get(machine))\n            let target_state = this.getNodeByName(data.state,\n                this.machines.get(data.machine))\n            if (!target_state)\n                continue\n            this.graph.link(source_state, target_state)\n        }\n    }\n}\n"],"sourceRoot":"/source/"}