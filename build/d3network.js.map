{"version":3,"sources":["d3network.ts"],"names":["D3NetworkJson","D3NetworkJson.constructor","D3NetworkJson.generateJson","D3NetworkJson.parseNode","D3NetworkJson.parseLink","D3NetworkJson.getMachineName","D3JsonDiffFactory","D3JsonDiffFactory.constructor","D3JsonDiffFactory.objectHash","D3JsonDiffFactory.generateJson","D3JsonDiffFactory.generateDiff","objectHash","NODE_LINK_TYPE","OBJECT_TYPE"],"mappings":"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","file":"d3network.js","sourcesContent":["import * as jsondiffpatch from 'jsondiffpatch'\nimport Network, {\n    Node as GraphNode\n} from \"./network\";\nimport * as assert from 'assert'\n\n\n\n/**\n * Produce JSON from Network, ready to be consumed by the D3 UI layer.\n */\nexport default class D3NetworkJson {\n    // list of created machine nodes\n    machine_ids: Set<MachineId>;\n    // map of machine IDs to machine nodes\n    machine_nodes: {\n        [index: string]: Machine\n    };\n    // map of graph nodes to their d3 nodes\n    nodes: Map<GraphNode, State>;\n    // map of created external nodes\n    // also used for creating links between machine nodes\n    externals: Map<GraphNode, Set<GraphNode>>;\n\n    json: ID3NetworkJson;\n\n    // TODO use enum for the source relations\n    relations_map = {\n        requires: NODE_LINK_TYPE.REQUIRES,\n        blocks: NODE_LINK_TYPE.BLOCKS,\n        implies: NODE_LINK_TYPE.IMPLIES,\n        order: NODE_LINK_TYPE.ORDER,\n        piped: NODE_LINK_TYPE.PIPED_IN\n    }\n    \n    constructor(\n            public network: Network) {\n        assert(network)\n    }\n\n    generateJson(): ID3NetworkJson {\n        // TODO cleanup at the end\n        this.json = {\n            nodes: [],\n            links: [],\n            groups: []\n        }\n        this.machine_ids = new Set\n        this.nodes = new Map\n        this.machine_nodes = {}\n        this.externals = new Map\n\n        // process nodes\n        this.network.graph.forEach(\n            node => this.parseNode(node) )\n        this.network.graph.traverseAll(\n            (from, to) => this.parseLink(from, to) )\n\n        return this.json;\n    }\n\n    parseNode(graph_node: GraphNode) {\n        var machine = graph_node.machine\n        var machine_node;\n\n        // handle a machine node TODO extract\n        if (!this.machine_ids.has(graph_node.machine_id)) {\n            machine_node = {\n                object_type: OBJECT_TYPE.MACHINE,\n                name: this.getMachineName(machine),\n                leaves: [],\n                id: graph_node.machine_id\n            }\n            this.json.groups.push(machine_node)\n            this.machine_ids.add(graph_node.machine_id)\n            this.machine_nodes[graph_node.machine_id] = machine_node\n        } else {\n            machine_node = this.machine_nodes[graph_node.machine_id]\n        }\n\n        var node = {\n            object_type: OBJECT_TYPE.STATE,\n            name: graph_node.name,\n            machine_id: graph_node.machine_id,\n            auto: Boolean(graph_node.state.auto),\n            negotiating: false, // TODO\n            is_set: graph_node.is_set,\n            index: this.json.nodes.length\n        }\n        \n        // add to json\n        this.json.nodes.push(node)\n        machine_node.leaves.push(node.index)\n        \n        // index the reference\n        this.nodes.set(graph_node, node)\n    }\n\n    parseLink(from: GraphNode, to: GraphNode) {\n        // create a link for every relation\n        var relations = from.relations(to)\n        for (let relation of relations) {\n            let relation_type = this.relations_map[relation]\n            assert(relation_type !== undefined)\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: relation_type,\n                active: false   // TODO\n            })\n        }\n        // TODO support piping properly, distinguish types\n        if (!relations.length) {\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: this.relations_map.piped,\n                active: false   // TODO\n            })\n        }\n    }\n\n    protected getMachineName(machine) {\n        return (machine.debug_prefix || '')\n            .replace(['[', ']', ' '], '');\n    }\n}\n\n/**\n * TODO make it a steram\n */\nexport class D3JsonDiffFactory {\n    diffpatcher: jsondiffpatch;\n    previous_json: ID3NetworkJson;\n    \n    constructor(\n            public network: D3NetworkJson) {\n        assert(network)\n        this.diffpatcher = jsondiffpatch.create({\n            objectHash: this.objectHash()\n        })\n    }\n\n    objectHash() {\n        return objectHash;\n    }\n\n    generateJson() {\n        // generate a new json and keep it as the last one\n        this.previous_json = this.network.generateJson()\n    }\n\n    generateDiff(base_json?: ID3NetworkJson) {\n        base_json = base_json || this.previous_json\n\n        assert(base_json, \"Base JSON required to create a diff\")\n\n        this.generateJson()\n        \n        // generate the diff\n        return this.diffpatcher.diff(base_json, this.previous_json)\n    }\n}\n\n\n// TODO type obj\nexport function objectHash(obj) {\n    let key\n    switch(obj.object_type) {\n        case OBJECT_TYPE.MACHINE:\n            key = obj.id\n            break\n        case OBJECT_TYPE.STATE:\n            key = `${obj.machine_id}:${obj.name}`\n            break\n        case OBJECT_TYPE.LINK:\n            key = `${obj.source_name}:${obj.target_name}`\n            break\n        default:\n            throw new Error('unknown object type')\n    }\n    return key\n}\n\n/* ---------- TYPES ---------- */\n\nexport enum NODE_LINK_TYPE {\n    REQUIRES,\n    BLOCKS,\n    ORDER,\n    IMPLIES,\n    PIPED_IN,\n    PIPED_OUT,\n    PIPED_INVERTED_IN,\n    PIPED_INVERTED_OUT\n}\n\nexport enum OBJECT_TYPE {\n    MACHINE,\n    STATE,\n    LINK\n}\n\nexport type MachineId = string;\nexport type StateName = string;\n\nexport type Machine = {\n    object_type: OBJECT_TYPE,\n    name: string,\n    leaves: number[],\n    id: string\n}\n\nexport type State = {\n    object_type: OBJECT_TYPE,\n    name: StateName;\n    machine_id: MachineId;\n    auto: boolean\n    negotiating: boolean,\n    is_set: boolean,\n    index: number\n}\n\nexport type Link = {\n    object_type: OBJECT_TYPE,\n    source_name: StateName,\n    target_name: StateName,\n    source: number,\n    target: number,\n    active: boolean,\n    type: NODE_LINK_TYPE\n}\n\nexport interface ID3NetworkJson {\n    nodes: Array<State>,\n    links: Array<Link>,\n    groups: Array<Machine>\n}\n"],"sourceRoot":"/source/"}