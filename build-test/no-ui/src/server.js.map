{"version":3,"sources":["src/server.ts"],"names":[],"mappings":"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","file":"src/server.js","sourcesContent":["\"use strict\";\n// import * as io from 'socket.io'\n// import * as _ from 'underscore'\n// import assert from 'assert'\n// import { AsyncMachine } from 'asyncmachine'\n\n\nconst io = require('socket.io')\nconst _ = require('underscore')\nconst assert = require('assert')\n\nconst server = io()\n\nserver.on('connection', () => {\n    console.log('new connection')\n})\n\n// class LoggerClient {\n//     io: SocketIO.Socket\n//     states: AsyncMachine\n    \n//     constructor(io) {\n//         this.io = io\n//         this.states = AsyncMachine.factory({\n//             Connecting: {\n//                 blocks: ['Connected']\n//             },\n//             Connected: {\n//                 blocks: ['Disconnected']\n//             },\n//             Disconnecting: {\n//                 blocks: ['Disconnected']\n//             },\n//             Disconnected: {\n//                 blocks: ['Disconnecting']\n//             }\n//         })\n//     }\n    \n//     Disconnect_state() {\n//         loggerSockets = _.without(loggerSockets, socket)\n//     }\n    \n//     Sync_Sync() {\n//         return this.Sync_state(...arguments)\n//     }\n    \n//     Sync_state() {\n//         var abort = this.states.getAbo\n//         this.io.emit('full-sync', diff)\n//         this.io.on('full-sync', this.)\n//     }\n    \n//     Diff_Sync() {\n//         return this.Sync_state(...arguments)\n//     }\n    \n//     Diff_state() {\n//         server.to(socket.loggerId).emit('diff-sync', diff)\n//     }\n// }\n\n// SERVER ENDPOINT\n\ntype loggerSocket = SocketIO.Socket\nvar loggerEndpoint = server.of('/logger')\nvar loggerSockets: loggerSocket[] = []\n\nloggerEndpoint.on('connection', function(socket: loggerSocket) {\n    // constructor\n    console.log('new logger connected')\n    loggerSockets.push(socket)\n    // handlers\n    socket.on('disconnect', function() {\n        loggerSockets = _.without(loggerSockets, socket)\n    })\n    socket.on('diff-sync', function(diff) {\n        console.log(socket.loggerId)\n        server.to(socket.loggerId).emit('diff-sync', diff)\n    })\n    // store the ID    \n    assert(socket.handshake.query, 'query param required')\n    let id = socket.handshake.query.id\n    assert(id, 'query.id param required')\n    socket.loggerId = id\n})\n\n// CLIENT ENDPOINT\n\ntype clientSocket = SocketIO.Socket\nvar clientEndpoint = server.of('/client')\nvar clientSockets: clientSocket[] = []\n\n// TODO gc\nvar clientsPerLogger = new Map<loggerSocket, clientSocket[]>()\n\nclientEndpoint.on('connection', function(socket: clientSocket) {\n    // constructor\n    console.log('new ui connected')\n    clientSockets.push(socket)\n    // handlers\n    socket.on('disconnect', function() {\n        clientSockets = _.without(clientSockets, socket)\n    })\n    \n    // join logic\n    socket.on('join', function(event: IJoinEvent) {\n        socket.join(event.loggerId)\n        // TODO find by ID\n        let loggerSocket = loggerSockets[0]\n        if (!clientsPerLogger.has(loggerSocket))\n            clientsPerLogger.set(loggerSocket, [])\n        clientsPerLogger.get(loggerSocket).push(socket)\n        // TODO group clients for this request\n        loggerSocket.emit('full-sync')\n        loggerSocket.once('full-sync', function(json) {\n            socket.emit('full-sync', json)\n        })\n    })\n    \n    // send the list of loggers\n    socket.emit('loggers', loggerSockets.map( socket => socket.loggerId ))\n})\n\n// TODO config\nserver.listen(3030)\n\ninterface IJoinEvent {\n    loggerId: string;\n}\n    "],"sourceRoot":"/source/"}