{"version":3,"sources":["src/d3stategraph.ts"],"names":["D3GraphJson","D3GraphJson.constructor","D3GraphJson.generateJson","D3GraphJson.parseNode","D3GraphJson.parseLink","D3GraphJson.getMachineName","D3JsonDiffFactory","D3JsonDiffFactory.constructor","D3JsonDiffFactory.objectHash","D3JsonDiffFactory.generateJson","D3JsonDiffFactory.generateDiff","objectHash","NODE_LINK_TYPE","OBJECT_TYPE"],"mappings":"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","file":"src/d3stategraph.js","sourcesContent":["import * as jsondiffpatch from 'jsondiffpatch'\nimport StateGraph, {\n    Node as GraphNode\n} from \"./stategraph\";\nimport assert from 'assert'\n\n\n\n/**\n * Produce JSON from StateGraph, ready to be consumed by the D3 UI layer.\n */\nexport default class D3GraphJson {\n    // list of created machine nodes\n    machine_ids: Set<MachineId>;\n    // map of machine IDs to machine nodes\n    machine_nodes: {\n        [index: string]: Machine\n    };\n    // map of graph nodes to their d3 nodes\n    nodes: Map<GraphNode, State>;\n    // map of created external nodes\n    // also used for creating links between machine nodes\n    externals: Map<GraphNode, Set<GraphNode>>;\n\n    json: ID3GraphJson;\n\n    // TODO use enum for the source relations\n    relations_map = {\n        requires: NODE_LINK_TYPE.REQUIRES,\n        blocks: NODE_LINK_TYPE.BLOCKS,\n        implies: NODE_LINK_TYPE.IMPLIES,\n        order: NODE_LINK_TYPE.ORDER,\n        piped: NODE_LINK_TYPE.PIPED_IN\n    }\n    \n    constructor(\n            public graph: StateGraph) {\n        assert(graph)\n    }\n\n    generateJson(): ID3GraphJson {\n        // TODO cleanup at the end\n        this.json = {\n            nodes: [],\n            links: [],\n            groups: []\n        }\n        this.machine_ids = new Set\n        this.nodes = new Map\n        this.machine_nodes = {}\n        this.externals = new Map\n\n        // process nodes\n        this.graph.graph.forEach( node => this.parseNode(node) )\n        this.graph.graph.traverseAll( (from, to) => this.parseLink(from, to) )\n\n        return this.json;\n    }\n\n    parseNode(graph_node: GraphNode) {\n        var machine = graph_node.machine\n        var machine_node;\n\n        // handle a machine node TODO extract\n        if (!this.machine_ids.has(graph_node.machine_id)) {\n            machine_node = {\n                object_type: OBJECT_TYPE.MACHINE,\n                name: this.getMachineName(machine),\n                leaves: [],\n                id: graph_node.machine_id\n            }\n            this.json.groups.push(machine_node)\n            this.machine_ids.add(graph_node.machine_id)\n            this.machine_nodes[graph_node.machine_id] = machine_node\n        } else {\n            machine_node = this.machine_nodes[graph_node.machine_id]\n        }\n\n        var node = {\n            object_type: OBJECT_TYPE.STATE,\n            name: graph_node.name,\n            machine_id: graph_node.machine_id,\n            auto: graph_node.state.auto,\n            negotiating: false, // TODO\n            is_set: graph_node.is_set,\n            index: this.json.nodes.length\n        }\n        \n        // add to json\n        this.json.nodes.push(node)\n        machine_node.leaves.push(node.index)\n        \n        // index the reference\n        this.nodes.set(graph_node, node)\n    }\n\n    parseLink(from: GraphNode, to: GraphNode) {\n        // create a link for every relation\n        var relations = from.relations(to)\n        for (let relation of from.relations(to)) {\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.name,\n                target_name: to.name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: this.relations_map[relation],\n                active: false   // TODO\n            })\n        }\n        // TODO support piping properly, distinguish types\n        if (!relations.length) {\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.name,\n                target_name: to.name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: this.relations_map.piped,\n                active: false   // TODO\n            })\n        }\n    }\n\n    protected getMachineName(machine) {\n        return (machine.debug_prefix || '')\n            .replace(['[', ']', ' '], '');\n    }\n}\n\n/**\n * TODO make it a steram\n */\nexport class D3JsonDiffFactory {\n    diffpatcher: jsondiffpatch;\n    previous_json: ID3GraphJson;\n    \n    constructor(\n            public graph: D3GraphJson) {\n        this.diffpatcher = jsondiffpatch.create({\n            objectHash: this.objectHash()\n        })\n    }\n\n    objectHash() {\n        return objectHash;\n    }\n\n    generateJson() {\n        // generate a new json and keep it as the last one\n        this.previous_json = this.graph.generateJson()\n    }\n\n    generateDiff(base_json?: ID3GraphJson) {\n        base_json = base_json || this.previous_json\n\n        assert(base_json, \"Base JSON required to create a diff\")\n\n        this.generateJson()\n        \n        // generate the diff\n        return this.diffpatcher.diff(base_json, this.previous_json)\n    }\n}\n\nexport function objectHash(obj) {\n    switch(obj.type) {\n        case OBJECT_TYPE.MACHINE:\n            return obj.id\n            break;\n        case OBJECT_TYPE.STATE:\n            return `${obj.name}`\n            break;\n            return `${obj.source_id}:${obj.target_id}`\n            break;\n        case OBJECT_TYPE.LINK:\n            return `${obj.source_name}:${obj.target_name}`\n            break;\n    }\n}\n\n/* ---------- TYPES ---------- */\n\nexport enum NODE_LINK_TYPE {\n    REQUIRES,\n    BLOCKS,\n    ORDER,\n    IMPLIES,\n    PIPED_IN,\n    PIPED_OUT,\n    PIPED_INVERTED_IN,\n    PIPED_INVERTED_OUT\n}\n\nexport enum OBJECT_TYPE {\n    MACHINE,\n    STATE,\n    LINK\n}\n\nexport type MachineId = string;\nexport type StateName = string;\n\nexport type Machine = {\n    object_type: OBJECT_TYPE,\n    name: string,\n    leaves: number[],\n    id: string\n}\n\nexport type State = {\n    object_type: OBJECT_TYPE,\n    name: StateName;\n    machine_id: MachineId;\n    auto: boolean\n    negotiating: boolean,\n    is_set: boolean,\n    index: number\n}\n\nexport type Link = {\n    object_type: OBJECT_TYPE,\n    source_name: StateName,\n    target_name: StateName,\n    source: number,\n    target: number,\n    active: boolean,\n    type: NODE_LINK_TYPE\n}\n\nexport interface ID3GraphJson {\n    nodes: Array<State>,\n    links: Array<Link>,\n    groups: Array<Machine>\n}\n"],"sourceRoot":"/source/"}