{"version":3,"sources":["src/d3network.ts","src/d3network.js"],"names":["D3NetworkJson","D3NetworkJson.constructor","D3NetworkJson.generateJson","D3NetworkJson.parseNode","D3NetworkJson.parseLink","D3NetworkJson.getMachineName","D3JsonDiffFactory","D3JsonDiffFactory.constructor","D3JsonDiffFactory.objectHash","D3JsonDiffFactory.generateJson","D3JsonDiffFactory.generateDiff","objectHash","NODE_LINK_TYPE","OBJECT_TYPE"],"mappings":"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","file":"src/d3network.js","sourcesContent":["import * as jsondiffpatch from 'jsondiffpatch'\nimport Network, {\n    Node as GraphNode\n} from \"./network\";\nimport * as assert from 'assert'\n\n\n\n/**\n * Produce JSON from Network, ready to be consumed by the D3 UI layer.\n */\nexport default class D3NetworkJson {\n    // list of created machine nodes\n    machine_ids: Set<MachineId>;\n    // map of machine IDs to machine nodes\n    machine_nodes: {\n        [index: string]: Machine\n    };\n    // map of graph nodes to their d3 nodes\n    nodes: Map<GraphNode, State>;\n    // map of created external nodes\n    // also used for creating links between machine nodes\n    externals: Map<GraphNode, Set<GraphNode>>;\n\n    json: ID3NetworkJson;\n\n    // TODO use enum for the source relations\n    relations_map = {\n        requires: NODE_LINK_TYPE.REQUIRES,\n        blocks: NODE_LINK_TYPE.BLOCKS,\n        implies: NODE_LINK_TYPE.IMPLIES,\n        order: NODE_LINK_TYPE.ORDER,\n        piped: NODE_LINK_TYPE.PIPED_IN\n    }\n    \n    constructor(\n            public network: Network) {\n        assert(network)\n    }\n\n    generateJson(): ID3NetworkJson {\n        // TODO cleanup at the end\n        this.json = {\n            nodes: [],\n            links: [],\n            groups: []\n        }\n        this.machine_ids = new Set\n        this.nodes = new Map\n        this.machine_nodes = {}\n        this.externals = new Map\n\n        // process nodes\n        this.network.graph.forEach(\n            node => this.parseNode(node) )\n        this.network.graph.traverseAll(\n            (from, to) => this.parseLink(from, to) )\n\n        return this.json;\n    }\n\n    parseNode(graph_node: GraphNode) {\n        var machine = graph_node.machine\n        var machine_node;\n\n        // handle a machine node TODO extract\n        if (!this.machine_ids.has(graph_node.machine_id)) {\n            machine_node = {\n                object_type: OBJECT_TYPE.MACHINE,\n                name: this.getMachineName(machine),\n                leaves: [],\n                id: graph_node.machine_id\n            }\n            this.json.groups.push(machine_node)\n            this.machine_ids.add(graph_node.machine_id)\n            this.machine_nodes[graph_node.machine_id] = machine_node\n        } else {\n            machine_node = this.machine_nodes[graph_node.machine_id]\n        }\n\n        var node = {\n            object_type: OBJECT_TYPE.STATE,\n            name: graph_node.name,\n            machine_id: graph_node.machine_id,\n            auto: Boolean(graph_node.state.auto),\n            negotiating: false, // TODO\n            is_set: graph_node.is_set,\n            index: this.json.nodes.length\n        }\n        \n        // add to json\n        this.json.nodes.push(node)\n        machine_node.leaves.push(node.index)\n        \n        // index the reference\n        this.nodes.set(graph_node, node)\n    }\n\n    parseLink(from: GraphNode, to: GraphNode) {\n        // create a link for every relation\n        var relations = from.relations(to)\n        for (let relation of relations) {\n            let relation_type = this.relations_map[relation]\n            assert(relation_type !== undefined)\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: relation_type,\n                active: false   // TODO\n            })\n        }\n        // TODO support piping properly, distinguish types\n        if (!relations.length) {\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: this.relations_map.piped,\n                active: false   // TODO\n            })\n        }\n    }\n\n    protected getMachineName(machine) {\n        return (machine.debug_prefix || '')\n            .replace(['[', ']', ' '], '');\n    }\n}\n\n/**\n * TODO make it a steram\n */\nexport class D3JsonDiffFactory {\n    diffpatcher: jsondiffpatch;\n    previous_json: ID3NetworkJson;\n    \n    constructor(\n            public network: D3NetworkJson) {\n        assert(network)\n        this.diffpatcher = jsondiffpatch.create({\n            objectHash: this.objectHash()\n        })\n    }\n\n    objectHash() {\n        return objectHash;\n    }\n\n    generateJson() {\n        // generate a new json and keep it as the last one\n        this.previous_json = this.network.generateJson()\n    }\n\n    generateDiff(base_json?: ID3NetworkJson) {\n        base_json = base_json || this.previous_json\n\n        assert(base_json, \"Base JSON required to create a diff\")\n\n        this.generateJson()\n        \n        // generate the diff\n        return this.diffpatcher.diff(base_json, this.previous_json)\n    }\n}\n\n\n// TODO type obj\nexport function objectHash(obj) {\n    let key\n    switch(obj.object_type) {\n        case OBJECT_TYPE.MACHINE:\n            key = obj.id\n            break\n        case OBJECT_TYPE.STATE:\n            key = `${obj.machine_id}:${obj.name}`\n            break\n        case OBJECT_TYPE.LINK:\n            key = `${obj.source_name}:${obj.target_name}`\n            break\n        default:\n            throw new Error('unknown object type')\n    }\n    return key\n}\n\n/* ---------- TYPES ---------- */\n\nexport enum NODE_LINK_TYPE {\n    REQUIRES,\n    BLOCKS,\n    ORDER,\n    IMPLIES,\n    PIPED_IN,\n    PIPED_OUT,\n    PIPED_INVERTED_IN,\n    PIPED_INVERTED_OUT\n}\n\nexport enum OBJECT_TYPE {\n    MACHINE,\n    STATE,\n    LINK\n}\n\nexport type MachineId = string;\nexport type StateName = string;\n\nexport type Machine = {\n    object_type: OBJECT_TYPE,\n    name: string,\n    leaves: number[],\n    id: string\n}\n\nexport type State = {\n    object_type: OBJECT_TYPE,\n    name: StateName;\n    machine_id: MachineId;\n    auto: boolean\n    negotiating: boolean,\n    is_set: boolean,\n    index: number\n}\n\nexport type Link = {\n    object_type: OBJECT_TYPE,\n    source_name: StateName,\n    target_name: StateName,\n    source: number,\n    target: number,\n    active: boolean,\n    type: NODE_LINK_TYPE\n}\n\nexport interface ID3NetworkJson {\n    nodes: Array<State>,\n    links: Array<Link>,\n    groups: Array<Machine>\n}\n","var jsondiffpatch = require('jsondiffpatch');\nvar assert = require('assert');\n/**\n * Produce JSON from Network, ready to be consumed by the D3 UI layer.\n */\nvar D3NetworkJson = (function () {\n    function D3NetworkJson(network) {\n        this.network = network;\n        // TODO use enum for the source relations\n        this.relations_map = {\n            requires: NODE_LINK_TYPE.REQUIRES,\n            blocks: NODE_LINK_TYPE.BLOCKS,\n            implies: NODE_LINK_TYPE.IMPLIES,\n            order: NODE_LINK_TYPE.ORDER,\n            piped: NODE_LINK_TYPE.PIPED_IN\n        };\n        assert(network);\n    }\n    D3NetworkJson.prototype.generateJson = function () {\n        var _this = this;\n        // TODO cleanup at the end\n        this.json = {\n            nodes: [],\n            links: [],\n            groups: []\n        };\n        this.machine_ids = new Set;\n        this.nodes = new Map;\n        this.machine_nodes = {};\n        this.externals = new Map;\n        // process nodes\n        this.network.graph.forEach(function (node) { return _this.parseNode(node); });\n        this.network.graph.traverseAll(function (from, to) { return _this.parseLink(from, to); });\n        return this.json;\n    };\n    D3NetworkJson.prototype.parseNode = function (graph_node) {\n        var machine = graph_node.machine;\n        var machine_node;\n        // handle a machine node TODO extract\n        if (!this.machine_ids.has(graph_node.machine_id)) {\n            machine_node = {\n                object_type: OBJECT_TYPE.MACHINE,\n                name: this.getMachineName(machine),\n                leaves: [],\n                id: graph_node.machine_id\n            };\n            this.json.groups.push(machine_node);\n            this.machine_ids.add(graph_node.machine_id);\n            this.machine_nodes[graph_node.machine_id] = machine_node;\n        }\n        else {\n            machine_node = this.machine_nodes[graph_node.machine_id];\n        }\n        var node = {\n            object_type: OBJECT_TYPE.STATE,\n            name: graph_node.name,\n            machine_id: graph_node.machine_id,\n            auto: Boolean(graph_node.state.auto),\n            negotiating: false,\n            is_set: graph_node.is_set,\n            index: this.json.nodes.length\n        };\n        // add to json\n        this.json.nodes.push(node);\n        machine_node.leaves.push(node.index);\n        // index the reference\n        this.nodes.set(graph_node, node);\n    };\n    D3NetworkJson.prototype.parseLink = function (from, to) {\n        // create a link for every relation\n        var relations = from.relations(to);\n        for (var _i = 0; _i < relations.length; _i++) {\n            var relation = relations[_i];\n            var relation_type = this.relations_map[relation];\n            assert(relation_type !== undefined);\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: relation_type,\n                active: false // TODO\n            });\n        }\n        // TODO support piping properly, distinguish types\n        if (!relations.length) {\n            this.json.links.push({\n                object_type: OBJECT_TYPE.LINK,\n                source_name: from.full_name,\n                target_name: to.full_name,\n                source: this.nodes.get(from).index,\n                target: this.nodes.get(to).index,\n                type: this.relations_map.piped,\n                active: false // TODO\n            });\n        }\n    };\n    D3NetworkJson.prototype.getMachineName = function (machine) {\n        return (machine.debug_prefix || '')\n            .replace(['[', ']', ' '], '');\n    };\n    return D3NetworkJson;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = D3NetworkJson;\n/**\n * TODO make it a steram\n */\nvar D3JsonDiffFactory = (function () {\n    function D3JsonDiffFactory(network) {\n        this.network = network;\n        assert(network);\n        this.diffpatcher = jsondiffpatch.create({\n            objectHash: this.objectHash()\n        });\n    }\n    D3JsonDiffFactory.prototype.objectHash = function () {\n        return objectHash;\n    };\n    D3JsonDiffFactory.prototype.generateJson = function () {\n        // generate a new json and keep it as the last one\n        this.previous_json = this.network.generateJson();\n    };\n    D3JsonDiffFactory.prototype.generateDiff = function (base_json) {\n        base_json = base_json || this.previous_json;\n        assert(base_json, \"Base JSON required to create a diff\");\n        this.generateJson();\n        // generate the diff\n        return this.diffpatcher.diff(base_json, this.previous_json);\n    };\n    return D3JsonDiffFactory;\n})();\nexports.D3JsonDiffFactory = D3JsonDiffFactory;\n// TODO type obj\nfunction objectHash(obj) {\n    var key;\n    switch (obj.object_type) {\n        case OBJECT_TYPE.MACHINE:\n            key = obj.id;\n            break;\n        case OBJECT_TYPE.STATE:\n            key = obj.machine_id + \":\" + obj.name;\n            break;\n        case OBJECT_TYPE.LINK:\n            key = obj.source_name + \":\" + obj.target_name;\n            break;\n        default:\n            throw new Error('unknown object type');\n    }\n    return key;\n}\nexports.objectHash = objectHash;\n/* ---------- TYPES ---------- */\n(function (NODE_LINK_TYPE) {\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"REQUIRES\"] = 0] = \"REQUIRES\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"BLOCKS\"] = 1] = \"BLOCKS\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"ORDER\"] = 2] = \"ORDER\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"IMPLIES\"] = 3] = \"IMPLIES\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"PIPED_IN\"] = 4] = \"PIPED_IN\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"PIPED_OUT\"] = 5] = \"PIPED_OUT\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"PIPED_INVERTED_IN\"] = 6] = \"PIPED_INVERTED_IN\";\n    NODE_LINK_TYPE[NODE_LINK_TYPE[\"PIPED_INVERTED_OUT\"] = 7] = \"PIPED_INVERTED_OUT\";\n})(exports.NODE_LINK_TYPE || (exports.NODE_LINK_TYPE = {}));\nvar NODE_LINK_TYPE = exports.NODE_LINK_TYPE;\n(function (OBJECT_TYPE) {\n    OBJECT_TYPE[OBJECT_TYPE[\"MACHINE\"] = 0] = \"MACHINE\";\n    OBJECT_TYPE[OBJECT_TYPE[\"STATE\"] = 1] = \"STATE\";\n    OBJECT_TYPE[OBJECT_TYPE[\"LINK\"] = 2] = \"LINK\";\n})(exports.OBJECT_TYPE || (exports.OBJECT_TYPE = {}));\nvar OBJECT_TYPE = exports.OBJECT_TYPE;"],"sourceRoot":"/source/"}