{"version":3,"sources":["test/no-ui/test.ts"],"names":[],"mappings":"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","file":"test/no-ui/test.js","sourcesContent":["import 'source-map-support/register'\nimport { AsyncMachine } from 'asyncmachine'\nimport { expect } from 'chai'\nimport * as assert from 'assert'\nimport Network from '../../src/network'\nimport D3GraphJson, {\n    D3JsonDiffFactory\n} from '../../src/d3network'\nimport * as fs from 'fs'\nimport * as path from 'path'\n\n// describe(\"Single machine graph\", function() {\n\n//   beforeEach( function() {\n//     this.machine = new AsyncMachine.factory(['A', 'B', 'C', 'D'])\n//     this.machine.A = {requires: ['B']}\n//     this.machine.C = {blocks: ['B']}\n//     this.machine.D = {requires: ['C']}\n\n//     this.stateGraph = new Network\n//     this.stateGraph.addMachine(this.machine)\n//   })\n\n//   it('should get all states as nodes', function() {\n//     expect(this.stateGraph.graph.nodes().length).to.be.eql(5)\n//   })\n\n//   it('should get all relations as edges', function() {\n//     var nodes = this.stateGraph.nodes\n//     let edges = _.map(this.stateGraph.graph.edges(), edge => {\n//       return `${nodes[edge.v].name} ${nodes[edge.w].name}`\n//     })\n//     expect(edges).to.eql([\n//       'A B',\n//       'C B',\n//       'D C'\n//     ])\n//   })\n// })\n\ndescribe(\"Network\", function() {\n\n    var stateGraph;\n\n    before( function() {\n        this.machine1 = AsyncMachine.factory(['A', 'B', 'C', 'D'])\n        this.machine1.debug_prefix = 'machine1'\n        this.machine1.C = {blocks: ['B']}\n        this.machine1.A = {requires: ['B']}\n        this.machine1.D = {requires: ['C']}\n\n        this.machine2 = AsyncMachine.factory(['E', 'F', 'G'])\n        this.machine2.debug_prefix = 'machine2'\n        this.machine2.E = {blocks: ['F']}\n\n        this.machine3 = AsyncMachine.factory(['E', 'F'])\n        this.machine3.debug_prefix = 'machine3'\n        this.machine3.E = {blocks: ['F']}\n\n        this.machine4 = AsyncMachine.factory(['E', 'F'])\n        this.machine4.debug_prefix = 'machine4'\n        this.machine4.E = {blocks: ['F']}\n\n        this.machine5 = AsyncMachine.factory(['E', 'F'])\n        this.machine5.debug_prefix = 'machine5'\n        this.machine5.E = {blocks: ['F']}\n\n        this.machine1.pipe('A', this.machine2, 'E')\n        this.machine2.pipe('E', this.machine1, 'B')\n        this.machine2.pipe('F', this.machine1, 'B')\n        this.machine2.pipe('E', this.machine3, 'F')\n        this.machine2.pipe('G', this.machine4, 'F')\n        this.machine5.pipe('F', this.machine3, 'E')\n\n        this.machine1.debug('[1]', 2)\n        //window.foo = this.machine1\n\n        stateGraph = new Network\n        stateGraph.addMachine(this.machine1)\n        stateGraph.addMachine(this.machine2)\n        stateGraph.addMachine(this.machine3)\n        stateGraph.addMachine(this.machine4)\n        stateGraph.addMachine(this.machine5)\n    })\n\n    describe('json factory', () => {\n        var json;\n        before(() => {\n            this.jsonGenerator = new D3GraphJson(stateGraph)\n            json = this.jsonGenerator.generateJson();\n        })\n        \n        it('should produce json', () => {\n            // console.log(JSON.stringify(json))\n            expect(json).to.eql(JSON.parse(\n                fs.readFileSync('test/fixtures/1.json').toString()))\n        })\n        \n        it('should support cross-machine connections', () => {\n            throw new Error\n        })\n    })\n    \n    describe('diffs factory', function() {\n        var json2;\n        before(function() {\n            let jsonGenerator = new D3GraphJson(stateGraph)\n            var differ = new D3JsonDiffFactory(jsonGenerator)\n            \n            differ.generateJson()\n            var prev = differ.previous_json\n            assert(differ.previous_json)\n            // console.log(differ.previous_json)\n            \n            this.machine1.add('C')\n            this.machine2.pipe('E', this.machine1, 'C')\n            \n            this.diff = differ.generateDiff()\n            // console.log(differ.previous_json)\n            // expect(prev).to.eql(differ.previous_json)\n        })\n        \n        it('should produce diffs', function() {\n            let expected_diff = \n                {nodes:{ '3': { is_set: [ false, true ] }, _t: 'a' }}\n            expect(this.diff).to.eql(expected_diff)\n        })\n    })\n        \n\n    //describe('ui', function() {\n    //    it('should render', function() {\n    //      var ui = new Ui(this.stateGraph)\n    //      ui.render()\n    //    })\n    //\n    //    afterEach(function() {\n    //\n    //    })\n    //})\n})\n"],"sourceRoot":"/source/"}