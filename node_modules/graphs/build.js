var inherits_1 = require("inherits");
var guardfn_1 = require("guardfn");
var afterfn_1 = require("afterfn");
var beforefn_1 = require("beforefn");
var sliced_1 = require("sliced");
var es6_set_1 = require("es6-set");
var es6_map_1 = require("es6-map");
exports.default = Graph;
function Graph() {
    this.set = new es6_set_1.default();
    this.linkMap = new es6_map_1.default();
    aspectify(this);
    this.guard('add', function () {
        return arguments.length;
    });
    this.before('add', function fn() {
        fn.args = fn.args
            .filter(function (item) {
            return item && !this.has(item);
        }, this);
    });
    this.after('delete', function () {
        sliced_1.default(arguments).forEach(function (item) {
            this.unlinkAll(item);
        }, this);
    });
    // ensure items added
    this.after('link', function ensureAdded() {
        sliced_1.default(arguments).forEach(function (item) {
            this.add(item);
        }, this);
    });
}
inherits_1.default(Graph, es6_set_1.default);
function proxyNativeSet(name) {
    return function () {
        return this.set[name].apply(this.set, arguments);
    };
}
function proxyNativeSetProperty(obj, name) {
    Object.defineProperty(obj, name, {
        get: function () {
            return this.set[name];
        }
    });
}
proxyNativeSetProperty(Graph, 'size');
Graph.prototype.add = proxyNativeSet('add');
Graph.prototype.has = proxyNativeSet('has');
Graph.prototype.keys = proxyNativeSet('keys');
Graph.prototype.delete = proxyNativeSet('delete');
Graph.prototype.clear = proxyNativeSet('clear');
Graph.prototype.values = proxyNativeSet('values');
Graph.prototype.forEach = proxyNativeSet('forEach');
Graph.prototype.entries = proxyNativeSet('entries');
Graph.prototype.link = function (from, to) {
    var linked = this._linked(from);
    linked.add(to);
    return true;
};
Graph.prototype.unlink = function (from, to) {
    var linked = this._linked(from);
    if (!linked.has(to))
        return false;
    linked.delete(to);
    if (!linked.size)
        this.linkMap.delete(from);
    return true;
};
Graph.prototype.unlinkAll = function unlinkAll(node) {
    this.from(node).forEach(function unlinkEachLinkedFrom(to) {
        this.unlink(node, to);
    }, this);
    this.to(node).forEach(function unlinkEachLinkedTo(from) {
        this.unlink(from, node);
    }, this);
};
Graph.prototype.from = function from(from) {
    return new es6_set_1.default(this._linked(from));
};
Graph.prototype.to = function to(to) {
    var linked = new es6_set_1.default();
    this.linkMap.forEach(function (value, key) {
        if (value.has(to))
            linked.add(key);
    });
    return linked;
};
Graph.prototype._linked = function _linked(from) {
    var linkedFrom = this.linkMap.get(from);
    if (!linkedFrom) {
        linkedFrom = new es6_set_1.default();
        this.linkMap.set(from, linkedFrom);
    }
    return linkedFrom;
};
Graph.prototype.visit = function visit(root, fn, visited) {
    if (arguments.length == 1) {
        fn = root;
        return this.visitAll(fn);
    }
    else if (arguments.length == 2) {
        if (typeof fn === 'function') {
            return this.visitFrom(root, fn);
        }
        else {
            visited = fn;
            fn = root;
            return this.visitAll(fn, visited);
        }
    }
    return this.visitFrom(root, fn, visited);
};
Graph.prototype.visitFrom = function visitFrom(root, fn, visited, previous) {
    visited = visited || new es6_set_1.default();
    if (!this.has(root))
        return;
    if (visited.has(root))
        return;
    visited.add(root);
    fn.call(this, root, previous);
    return this.from(root).forEach(function (linked) {
        this.visitFrom(linked, fn, visited, root);
    }, this);
};
Graph.prototype.visitAll = function visitAll(fn, visited) {
    visited = visited || new es6_set_1.default();
    this.forEach(function (node) {
        this.visitFrom(node, fn, visited);
    }, this);
};
Graph.prototype.traverse = function traverse(from, fn) {
    if (arguments.length === 1)
        return this.traverseAll(from);
    return this.traverseFrom(from, fn);
};
Graph.prototype.traverseFrom = function traverseFrom(from, fn, visited) {
    visited = visited || new es6_map_1.default();
    var linked = visited.get(from);
    if (!linked)
        linked = new es6_set_1.default();
    visited.set(from, linked);
    this.from(from).forEach(function (to) {
        if (linked.has(to))
            return;
        linked.add(to);
        fn.call(this, from, to);
        this.traverseFrom(to, fn, visited);
    }, this);
};
Graph.prototype.traverseAll = function traverseAll(fn) {
    var self = this;
    this.linkMap.forEach(function (links, from) {
        links.forEach(function (to) {
            fn.call(self, from, to);
        });
    });
};
function aspectify(target) {
    var _before = beforefn_1.default;
    var _after = afterfn_1.default;
    var _guard = guardfn_1.default;
    target.before = function before(name, fn) {
        this[name] = _before(this[name], fn);
        return this;
    };
    target.after = function after(name, fn) {
        this[name] = _after(this[name], fn);
        return this;
    };
    target.guard = function guard(name, fn) {
        this[name] = _guard(this[name], fn);
        return this;
    };
    return target;
}
