declare module 'graphs' {
	interface Graph<T> extends Set<T> {
		link(from: T, to: T);
		unlink(from: T, to: T);
		unlinkAll(node: T);
		from(from: T): Set<T>;
		to(to: T): Set<T>;
		visit(root: T, fn: (T) => void, visited: Map<T, T>);
		visitFrom(root, fn, visited, previous);
		visitAll(fn: (T) => void, visited: Map<T, T>);
		traverse(from: T, fn: (from: T, to: T) => void);
		traverse(from: (from: T, to: T) => void);
		traverseFrom(from: T, fn: (from: T, to: T) => void, visited: Map<T, T>);
		traverseAll(fn: (from: T, to: T) => void);
		set: Set<T>;
	}


    var Graph: {
        new<T>(): Graph<T>;
    }

	export default Graph;
}